{"version":3,"sources":["components/NavigationLink/NavigationLink.tsx","components/Navbar/Navbar.tsx","App.tsx","Pages/Home.tsx","api.ts","components/Loader/Loader.tsx","components/PersonLink/PersonLink.tsx","components/PeopleTable/PeopleTable.tsx","Pages/People.tsx","Pages/PageNotFound.tsx","index.tsx"],"names":["NavigationLink","to","title","className","isActive","classNames","Navbar","role","App","Home","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","Loader","PersonLink","person","name","sex","slug","PeopleTable","peopleList","useParams","urlSlug","isSelected","parentsCheck","linkToParent","find","map","born","died","motherName","fatherName","People","useState","setPeopleList","isLoading","setIsLoading","isError","setIsError","fetchPeople","fetchedPeople","useEffect","length","PageNotFound","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.405f144a.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string;\n  title: string;\n};\n\nexport const NavigationLink: React.FC<Props> = ({ to, title }) => {\n  return (\n    <NavLink\n      to={to}\n      className={({ isActive }) => classNames(\n        'navbar-item',\n        ({ 'has-background-grey-lighter': isActive }),\n      )}\n    >\n      {title}\n    </NavLink>\n  );\n};\n","import { NavigationLink } from '../NavigationLink';\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavigationLink to=\"/\" title=\"Home\" />\n          <NavigationLink to=\"/people\" title=\"People\" />\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport './App.scss';\nimport { Navbar } from './components/Navbar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </main>\n  </div>\n);\n","import { FC } from 'react';\n\nexport const Home: FC = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","import { Person } from './types/Person';\n\nconst API_URL\n= 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Partial<Person>;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const { name, sex, slug } = person;\n\n  return (\n    <Link\n      to={`../${slug}`}\n      className={classNames(\n        ({ 'has-text-danger': sex === 'f' }),\n      )}\n    >\n      {name}\n    </Link>\n  );\n};\n","import classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink';\n\ntype Props = {\n  peopleList: Person[];\n};\n\nexport const PeopleTable: React.FC<Props> = ({ peopleList }) => {\n  const { urlSlug = '' } = useParams();\n\n  const isSelected = (slug: string) => slug === urlSlug;\n\n  const parentsCheck = (name: string | null) => {\n    if (!name) {\n      return '-';\n    }\n\n    const linkToParent = peopleList.find(person => person.name === name);\n\n    return linkToParent ? <PersonLink person={linkToParent} /> : name;\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {peopleList.map((person) => {\n          const {\n            name,\n            slug,\n            sex,\n            born,\n            died,\n            motherName,\n            fatherName,\n          } = person;\n\n          return (\n            <tr\n              key={slug}\n              data-cy=\"person\"\n              className={classNames(\n                { 'has-background-warning': isSelected(slug) },\n              )}\n            >\n              <td>\n                <PersonLink person={{ name, sex, slug }} />\n              </td>\n\n              <td>{sex}</td>\n              <td>{born}</td>\n              <td>{died}</td>\n              <td>{parentsCheck(motherName)}</td>\n              <td>{parentsCheck(fatherName)}</td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { getPeople } from '../api';\nimport { Loader } from '../components/Loader';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { Person } from '../types';\n\nexport const People = () => {\n  const [peopleList, setPeopleList] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isError, setIsError] = useState<boolean>(false);\n\n  const fetchPeople = async () => {\n    try {\n      setIsLoading(true);\n\n      const fetchedPeople: Person[] = await getPeople();\n\n      setPeopleList(fetchedPeople);\n    } catch (err) {\n      setTimeout(() => {\n        setIsError(true);\n      }, 3000);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchPeople();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && (\n            <Loader />\n          )}\n\n          {!isLoading && isError && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {!isError && !isLoading && peopleList.length < 1 && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {!isLoading && peopleList.length > 0 && (\n            <PeopleTable peopleList={peopleList} />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","export const PageNotFound = () => {\n  return (\n    <h1 className=\"title\">Page not found</h1>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport {\n  HashRouter as Router,\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { Home } from './Pages/Home';\nimport { People } from './Pages/People';\nimport { PageNotFound } from './Pages/PageNotFound';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route path=\"*\" element={<PageNotFound />} />\n\n          <Route index element={<Home />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n\n          <Route path=\"people\">\n            <Route index element={<People />} />\n            <Route path=\":urlSlug\" element={<People />} />\n          </Route>\n        </Route>\n      </Routes>\n    </Router>,\n  );\n"],"sourceRoot":""}